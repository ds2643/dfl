// monitor command lines programs to keep track of abnormal behavior
module commandline;

// import core.stdc.signal; // signal.h
// import core.thread; // run batch of processes
import std.parallelism;
import std.process;
import std.stdio;
import mutation;

/*
* AIM: run each instance of the unit tests as a thread. save outcomes in association list.
* 1. leverage D's multithreading capabilities
* 2. converge on writing to a single data structure
* 3. outcome data measures signals of signal.h
*/

string buildProcess(string programName, string option, string argument) {
    // builds executable command line expression
    return (program ~ option ~ arguments);
}

void launchProcess(string command) {

}

void monitor(int n, string programName, string inputSeed) {
    // tests a commandline application n times with random input
    // executes in parallel, assumes processes independent
    while (n > 0){ //TODO: parallelize
        string argument = mutate!(string)(inputSeed); // fix mutate template syntax
        string options = "";
        string process = buildProcess(programName, options, argument);

        --n;
    }
}

/*
 kel sugg:
spawnProcess -> pool of child processes (pool size)
spawn no_cores threads
 
 */

